var search_data = {"index":{"searchIndex":["fps","timecode","testfpstimecode","<=>()","==()","count_to_string()","new()","normalize()","string_as_duration()","string_as_duration()","string_to_count()","succ()","test_class_methods()","test_comparison_works_on_strings_regardless_of_counts()","test_create_count_if_given_must_be_fixnum()","test_create_counts_greater_than_24_hours_will_be_normalized()","test_create_fall_back_to_count_when_string_is_invalid()","test_create_legally_doesnt_fail()","test_create_must_have_valid_tc_mode()","test_create_negative_counts_will_be_normalized()","test_create_nonexistent_drop_frame_times_will_be_corrected()","test_create_string_all_fields_must_be_within_bounds()","test_create_string_and_count_cannot_both_be_nil()","test_create_string_must_be_valid_if_no_count_given()","test_create_use_string_by_default()","test_dropframe_string_as_duration()","test_succ()","fps-timecode.gemspec"],"longSearchIndex":["fps","fps::timecode","testfpstimecode","fps::timecode#<=>()","fps::timecode#==()","fps::timecode::count_to_string()","fps::timecode::new()","fps::timecode::normalize()","fps::timecode::string_as_duration()","fps::timecode#string_as_duration()","fps::timecode::string_to_count()","fps::timecode#succ()","testfpstimecode#test_class_methods()","testfpstimecode#test_comparison_works_on_strings_regardless_of_counts()","testfpstimecode#test_create_count_if_given_must_be_fixnum()","testfpstimecode#test_create_counts_greater_than_24_hours_will_be_normalized()","testfpstimecode#test_create_fall_back_to_count_when_string_is_invalid()","testfpstimecode#test_create_legally_doesnt_fail()","testfpstimecode#test_create_must_have_valid_tc_mode()","testfpstimecode#test_create_negative_counts_will_be_normalized()","testfpstimecode#test_create_nonexistent_drop_frame_times_will_be_corrected()","testfpstimecode#test_create_string_all_fields_must_be_within_bounds()","testfpstimecode#test_create_string_and_count_cannot_both_be_nil()","testfpstimecode#test_create_string_must_be_valid_if_no_count_given()","testfpstimecode#test_create_use_string_by_default()","testfpstimecode#test_dropframe_string_as_duration()","testfpstimecode#test_succ()",""],"info":[["FPS","","FPS.html","","<p>Timecode library Implements Timecode class Version 0.0.2\n<p>Author: Loran Kary Copyright 2013 Focal Point …\n"],["FPS::Timecode","","FPS/Timecode.html","","<p>Since there are many class methods, often there is no need to create  an\ninstance of class Timecode. …\n"],["TestFpsTimecode","","TestFpsTimecode.html","",""],["<=>","FPS::Timecode","FPS/Timecode.html#method-i-3C-3D-3E","(other)","<p>compare two timecodes comparison (spaceship) operator does string compare\n"],["==","FPS::Timecode","FPS/Timecode.html#method-i-3D-3D","(other)","<p>compare two timecodes for equality\n<p>equality operator does string compare two timecodes may be considered …\n"],["count_to_string","FPS::Timecode","FPS/Timecode.html#method-c-count_to_string","(tc_mode, tc_count, duration = false)","<p>count_to_string\n<p>Class method to compute a string from a frame count\n"],["new","FPS::Timecode","FPS/Timecode.html#method-c-new","(tc_mode, tc_string, tc_count = nil)","<p>initialize Construct a new instance of Timecode, given a mode and either a \ntimecode string or a frame …\n"],["normalize","FPS::Timecode","FPS/Timecode.html#method-c-normalize","(tc_mode, tc_count)","<p>Class method to normalize a frame count &gt;= 0 and &lt; 24h Correct 24\nhour overflow or underflow\n"],["string_as_duration","FPS::Timecode","FPS/Timecode.html#method-c-string_as_duration","(tc_mode, tc_count)","<p>Class method to compute a string as a duration from a frame count_to_string\n"],["string_as_duration","FPS::Timecode","FPS/Timecode.html#method-i-string_as_duration","()","<p>string_as_duration The difference of two timecodes might be used as a\nduration. For non-drop frame, the …\n"],["string_to_count","FPS::Timecode","FPS/Timecode.html#method-c-string_to_count","(tc_mode, tc_string)","<p>string_to_count Class method to compute a count from a string\n"],["succ","FPS::Timecode","FPS/Timecode.html#method-i-succ","()","<p>succ return the next timecode address in the sequence\n"],["test_class_methods","TestFpsTimecode","TestFpsTimecode.html#method-i-test_class_methods","()",""],["test_comparison_works_on_strings_regardless_of_counts","TestFpsTimecode","TestFpsTimecode.html#method-i-test_comparison_works_on_strings_regardless_of_counts","()",""],["test_create_count_if_given_must_be_fixnum","TestFpsTimecode","TestFpsTimecode.html#method-i-test_create_count_if_given_must_be_fixnum","()",""],["test_create_counts_greater_than_24_hours_will_be_normalized","TestFpsTimecode","TestFpsTimecode.html#method-i-test_create_counts_greater_than_24_hours_will_be_normalized","()",""],["test_create_fall_back_to_count_when_string_is_invalid","TestFpsTimecode","TestFpsTimecode.html#method-i-test_create_fall_back_to_count_when_string_is_invalid","()",""],["test_create_legally_doesnt_fail","TestFpsTimecode","TestFpsTimecode.html#method-i-test_create_legally_doesnt_fail","()",""],["test_create_must_have_valid_tc_mode","TestFpsTimecode","TestFpsTimecode.html#method-i-test_create_must_have_valid_tc_mode","()",""],["test_create_negative_counts_will_be_normalized","TestFpsTimecode","TestFpsTimecode.html#method-i-test_create_negative_counts_will_be_normalized","()",""],["test_create_nonexistent_drop_frame_times_will_be_corrected","TestFpsTimecode","TestFpsTimecode.html#method-i-test_create_nonexistent_drop_frame_times_will_be_corrected","()",""],["test_create_string_all_fields_must_be_within_bounds","TestFpsTimecode","TestFpsTimecode.html#method-i-test_create_string_all_fields_must_be_within_bounds","()",""],["test_create_string_and_count_cannot_both_be_nil","TestFpsTimecode","TestFpsTimecode.html#method-i-test_create_string_and_count_cannot_both_be_nil","()",""],["test_create_string_must_be_valid_if_no_count_given","TestFpsTimecode","TestFpsTimecode.html#method-i-test_create_string_must_be_valid_if_no_count_given","()",""],["test_create_use_string_by_default","TestFpsTimecode","TestFpsTimecode.html#method-i-test_create_use_string_by_default","()",""],["test_dropframe_string_as_duration","TestFpsTimecode","TestFpsTimecode.html#method-i-test_dropframe_string_as_duration","()",""],["test_succ","TestFpsTimecode","TestFpsTimecode.html#method-i-test_succ","()",""],["fps-timecode.gemspec","","fps-timecode_gemspec.html","","<p>Gem::Specification.new do |s|\n\n<pre>s.name = &#39;fps-timecode&#39;\ns.version = &#39;0.0.3&#39;\ns.summary = &#39;Implements timecode ...</pre>\n"]]}}